<%
  var headerHTML = ""
  headerHTML = _.get(forestay,['config','forestay','headerHtml']) ? _.get(forestay,['config','forestay','headerHtml']) : headerHTML
  headerHTML = _.get(forestay,['config','forestay','createUpdate','headerHtml']) ? _.get(forestay,['config','forestay','createUpdate','headerHtml']) : headerHTML
  if(forestay.id)
    headerHTML = _.get(forestay,['config','forestay','update','headerHtml']) ? _.get(forestay,['config','forestay','update','headerHtml']) : headerHTML
  else
    headerHTML = _.get(forestay,['config','forestay','create','headerHtml']) ? _.get(forestay,['config','forestay','create','headerHtml']) : headerHTML

  var footerHTML = ""
  footerHTML = _.get(forestay,['config','forestay','footerHtml']) ? _.get(forestay,['config','forestay','footerHtml']) : footerHTML
  footerHTML = _.get(forestay,['config','forestay','createUpdate','footerHtml']) ? _.get(forestay,['config','forestay','createUpdate','footerHtml']) : footerHTML
  if(forestay.id)
    footerHTML = _.get(forestay,['config','forestay','update','footerHtml']) ? _.get(forestay,['config','forestay','update','footerHtml']) : footerHTML
  else
    footerHTML = _.get(forestay,['config','forestay','create','footerHtml']) ? _.get(forestay,['config','forestay','create','footerHtml']) : footerHTML

  var pageTitle =
    _.get(forestay, ["config","forestay","title"]) ||
    _.get(forestay, ["model","name"]) ||
    "forestay Model";
%>
  <%- headerHTML %>
  <h1><%= pageTitle %></h1>
  <h6>
    <% if(!forestay.id) { %>Create New<% } %>
    <% if(forestay.id) { %>Update <% } %>
    <%= _.get(forestay, ["model","name"])%>
    <% if(forestay.id) { %><%= forestay.id %><% } %>
  </h6>
  <hr/>
  <form onsubmit="return validateField(<%= JSON.stringify(forestay.config.attributes) %>)"  method="post" class="form form-<%= forestay.model.name %>">
    <table class="table">
      <% Object.keys(forestay.config.attributes).forEach(function(attrKey, i){ %>
        <%
      var this_attr = forestay.config.attributes[attrKey]

      if (_.get(forestay.config.attributes[attrKey], ["meta","forestay","hideInForm"]) === true || hideIfCondition){
        // do nothing if this field is meant to be hidden

      }
      else {

        var attributeType = _.get(forestay.config.attributes[attrKey],"type") ||  _.get(forestay.config.attributes, [attrKey]) || ""

              if(typeof attributeType != "string") attributeType ="";

              if (typeof _.get(forestay.config.attributes[attrKey], ['collection']) === 'string') attributeType = 'collection'
              if (typeof _.get(forestay.config.attributes[attrKey], ['model']) === 'string') attributeType = 'model'
              if (typeof _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'displayAs']) != "undefined" && _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'displayAs']) == 'textarea') attributeType = 'text';
              if (typeof _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'uiType']) != "undefined" && _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'uiType']) == 'textarea') attributeType = 'text';

              attributeType = attributeType.toLowerCase();

              var enumOptions

              if(attributeType == "string" || attributeType == "number"){
                // I've seen both formats for
                if (Array.isArray(_.get(forestay.config.attributes[attrKey],["validations","isIn"]))) {
                  enumOptions = _.get(forestay.config.attributes[attrKey],["validations","isIn"])
                  attributeType = "enum"
                }
                if (Array.isArray(_.get(forestay.config.attributes[attrKey],["isIn"]))){
                  enumOptions = _.get(forestay.config.attributes[attrKey],["isIn"])
                  attributeType = "enum"
               }
               if (Array.isArray(_.get(forestay.config.attributes[attrKey],["enum"]))){
                 enumOptions = _.get(forestay.config.attributes[attrKey],["enum"])
                 attributeType = "enum"
               }

              }

              var value = "";
              var required = "";
              var v
              var attributeValue
              var attributeMutable = '';

              if (_.get(forestay.config.attributes[attrKey], "required") === true) {
                required = "required"
              }
              if (forestay.id) {

                if(typeof record[attrKey] === "string") v = record[attrKey].split('"').join("&quot;") //.replace(/\"/g,'&quot;')
                else v = record[attrKey]

                if (record[attrKey] === null) v = ""

                value = `value="${v}"`
              }  else {

              if (typeof _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'defaultValue']) != "undefined") {
                value = `value="${_.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'defaultValue'])}"`
                attributeValue = _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'defaultValue'])
              }

              if(typeof _.get(forestay,["prefills",attrKey]) != "undefined"){
                value = `value="${forestay.prefills[attrKey]}"`
                attributeValue = forestay.prefills[attrKey]
              }

            }

            if (forestay.id && typeof _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'mutable']) != "undefined" && _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'mutable']) == false) {
              attributeMutable = 'readonly';
              if(['boolean','enum','collection','model'].indexOf(attributeType) > -1) {
                attributeMutable = 'disabled';
              }
            }

            var hideIfCondition = false;  var showIfCondition = true;
            if (forestay.id && typeof _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'hideIf','isIn']) != "undefined" && Array.isArray(_.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'hideIf','isIn']))) {
              hideIfValue = _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'hideIf','isIn']);
              if(hideIfValue.indexOf(record[attrKey]) > -1) {
                hideIfCondition = true;
              }
            }

            if (forestay.id && typeof _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'showIf','isIn']) != "undefined" && Array.isArray(_.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'showIf','isIn']))) {
              showIfValue = _.get(forestay.config.attributes[attrKey], ['meta', 'forestay', 'showIf','isIn']);
              if(showIfValue.indexOf(record[attrKey]) == -1) {
                showIfCondition = false;
              }
            }
    %>
          <% if(hideIfCondition == false && showIfCondition == true) { %>
          <tr>
            <td class="form form-<%=attrKey %>" style="width: <%= _.get(forestay.config.forestay, ["createUpdate","labelWidth"]) || 200 %>px; text-align: right">
              <div class="label">
                <%=
                  _.get(this_attr, ["meta","forestay","label"]) ||
                  attrKey
                %>:
              </div>
              <% if(_.get(this_attr, ["description"])) { %>
                <div class="description">
                  <%= this_attr.description %>
                </div>
              <% } %>

            </td>
            <td>

              <% if(attributeType == "string"){ %>
                  <input id="attr-<%= attrKey %>"  style="width:100%" name="<%= attrKey %>" class="input input-<%= attrKey %>" <%- value %> <%= required %> <%= attributeMutable %>>
                  <div id="error-<%= attrKey %>" class="alert alert-danger"></div>
                <% } else if(attributeType == "json"){ %>
                <% if(forestay.id) { %>
                  <textarea id="attr-<%= attrKey %>"  style="width:100%; height: 200px" name="<%= attrKey %>" class="text-input text-input-<%= attrKey %>" <%= required %> <%= attributeMutable %> ><%- JSON.stringify(record[attrKey]) %></textarea>
                  <div id="error-<%= attrKey %>" class="alert alert-danger"></div>
                <% } else { %>
                  <textarea id="attr-<%= attrKey %>"  style="width:100%; height: 200px" name="<%= attrKey %>" class="text-input text-input-<%= attrKey %>" <%= required %> <%= attributeMutable %> ><%- JSON.stringify(attributeValue) %></textarea>
                  <div id="error-<%= attrKey %>" class="alert alert-danger"></div>
                <% } %>
                <% } else if(attributeType == "number"){ %>
                  <input id="attr-<%= attrKey %>"  style="width:100%" type="number" name="<%= attrKey %>" class="number-input number-input-<%= attrKey %>" <%- value %> <%= required %> <%= attributeMutable %>>
                  <div id="error-<%= attrKey %>" class="alert alert-danger"></div>
                <% } else if(attributeType == "text"){ %>
                  <textarea id="attr-<%= attrKey %>"
                    style="width:100%; height: 200px"
                    name="<%= attrKey %>"
                    class="text-input text-input-<%= attrKey %>"
                    <%= required %>
                    <%= attributeMutable %> >
                    <%if(forestay.id){ %><%- record[attrKey]%><% } else { %>
                    <%= attributeValue %>
                    <% } %>
                  </textarea>
                  <div id="error-<%= attrKey %>" class="alert alert-danger"></div>
                <% } else if(attributeType == "boolean"){
                    var trueSelected = ""
                    var falseSelected = ""
                    if(forestay.id && record[attrKey] == true) trueSelected = "selected"
                    if(! forestay.id && attributeValue == true) trueSelected = "selected"
                    if(forestay.id && record[attrKey] == false) falseSelected = "selected"
                    if(! forestay.id && attributeValue == false) falseSelected = "selected"
                  %>
                  <select id="attr-<%= attrKey %>"  name="<%= attrKey %>" <%= required %> <%= attributeMutable %> class="boolean-input boolean-input-<%= attrKey %>">
                    <option></option>
                    <option value="true" <%= trueSelected %>>
                      <% if(typeof _.get(forestay.config.attributes[attrKey],["meta","forestay","booleanLabels","true"]) === "string"){ %>
                        <%= forestay.config.attributes[attrKey].meta.forestay.booleanLabels.true %>
                      <% } else { %>
                        True
                      <% } %>
                    </option>
                    <option value="false" <%= falseSelected %>>
                      <% if(typeof _.get(forestay.config.attributes[attrKey],["meta","forestay","booleanLabels","false"]) === "string"){ %>
                        <%= forestay.config.attributes[attrKey].meta.forestay.booleanLabels.false %>
                      <% } else { %>
                        False
                      <% } %>
                    </option>
                  </select>
                  <div id="error-<%= attrKey %>" class="alert alert-danger"></div>
                <% } else if (attributeType == "enum"){ %>
                  <select id="attr-<%= attrKey %>"  name="<%= attrKey %>" <%= required %> <%= attributeMutable %>>
                    <option></option>
                    <% enumOptions.forEach(function(o){ %>
                      <% var isSelected = "" %>
                      <% if(forestay.id && o === record[attrKey]) isSelected = "selected" %>
                      <% if(! forestay.id && o == attributeValue) isSelected = "selected" %>
                      <option value="<%= o %>" <%= isSelected %>><%= o %></option>
                    <% }) %>
                </select>
                <div id="error-<%= attrKey %>" class="alert alert-danger"></div>
                <% } else if (attributeType == "collection"){ %>
                  <%- include ("createUpdateCollections.ejs", { attrKey: attrKey }); %>
                <% } else if (attributeType == "model"){ %>
                  <%- include ("createUpdateModels.ejs", { attrKey: attrKey }); %>
                <% }else { // unknown attribute type %>
                  (can't edit <strong><%= attributeType %></strong> attributes at this time)
                  <% }%>
            </td>

          </tr>
          <% } %>
          <% } // End if !== hideInForm %>
          <% }) %>

    </table>
    <input type="hidden" name='_csrf' value='<%= _csrf %>'>
    <button class="btn btn-info" style="width:100%">Submit</button>
  </form>

<%- footerHTML %>

  <style>
    .description {
      font-size: 12px;
      color: #888
    }
  </style>


<script>

function hide (elements) {
  elements = elements.length ? elements : [elements];
  for (var index = 0; index < elements.length; index++) {
    elements[index].style.display = 'none';
  }
}

hide(document.querySelectorAll('.alert.alert-danger'));

function validateField(attributes){
  var validationsProperties = ['custom','isAfter','isBefore','isBoolean','isCreditCard','isEmail','isHexColor','isIn','isInteger','isIP','isNotEmptyString','isNotIn','isNumber','isString','isURL','isUUID','max','min','maxLength','minLength','regex'];
  var errorMessages = {
   "min":"Value should not be less than",
   "max":"Value should not be greater than",
   "isIn":"Value should exist in",
   "isNotIn":"Value should not exist in",
   "isEmail":"Not a valid email address",
   "isBoolean":"Value should be true or false",
   "isNotEmptyString":"Value is required",
   "isNumber":"Value should be number",
   "isString":"Value should be alphanumeric",
   "isURL":"Value should be valid URL",
   "maxLength":"Maximum number of character is",
   "minLength":"Minimum number of character is",
   "isInteger":"Value should be Integer",
   "isIP":"Value should be a valid IP Address",
   "isHexColor":"Value should be a valid css color code",
   "regex":"Invalid value",
   "isUUID":"Invalid value"
 }
  var attrVal = errorNote= "";
  var validationsProperties;
  var hideInForm;
  var attributeObj;
  var errorCount = 0;
  var status;
  var total_errors = [];
  Object.keys(attributes).forEach(function(attrKey) {
    hideInForm = false;
    attributeObj = attributes[attrKey]

    if(typeof attributeObj.meta.forestay.hideInForm != "undefined"){
      if(attributeObj.meta.forestay.hideInForm == true) {
        hideInForm = true
      } else if(attributeObj.meta.forestay.hideInForm == false) {
        hideInForm = false;
      } else {
        hideInForm = false;
      }
    }

    if(hideInForm == false) {
        if (typeof attributeObj.type != "undefined") {
          if(attributeObj.type == 'string' || attributeObj.type == 'number' || attributeObj.type == 'json') {
          attrVal = document.getElementById("attr-"+attrKey).value;
          if(attributeObj.type == 'json') {
              status = ValPropIsTypeJson(attrKey,attrVal)
              if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]] + " " + attributeObj[validationsProperties[i]]; }
          }
          for (var i = 0; i < validationsProperties.length; i++) {
          if (typeof attributeObj[validationsProperties[i]] != "undefined") {
            document.getElementById("error-"+attrKey).style.display = 'none';
            switch(validationsProperties[i]) {
              case "min":
              if(validationsProperties[i] == 'min') {
              status = ValPropMin(attrKey,attrVal,attributeObj[validationsProperties[i]])
              if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]] + " " + attributeObj[validationsProperties[i]]; }
              }
              break;

              case "max":
              if(validationsProperties[i] == 'max') {
              status = ValPropMax(attrKey,attrVal,attributeObj[validationsProperties[i]])
              if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]] + " " + attributeObj[validationsProperties[i]]; }
              }
              break;

              case "isIn":
              if(validationsProperties[i] == 'isIn') {
              status = ValPropIsIn(attrKey,attrVal,attributeObj[validationsProperties[i]])
              if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]] + " " + attributeObj[validationsProperties[i]]; }
              }
              break;

              case "isNotIn":
                if(validationsProperties[i] == 'isNotIn') {
                  status = ValPropIsNotIn(attrKey,attrVal,attributeObj[validationsProperties[i]])
                  if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]] + " " + attributeObj[validationsProperties[i]]; }
                }
              break

              case "isEmail":
              if(validationsProperties[i] == 'isEmail') {
                status = ValPropIsEmail(attrKey,attrVal)
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]]; }
              }
              break

              case "isBoolean":
              if(validationsProperties[i] == 'isBoolean') {
                status = ValPropIsBoolean(attrKey,attrVal)
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]]; }
              }
              break

              case "isNotEmptyString":
              if(validationsProperties[i] == 'isNotEmptyString') {
                status = ValPropIsNotEmptyString(attrKey,attrVal)
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]]; }
              }
              break

              case "isNumber":
              if(validationsProperties[i] == 'isNumber') {
                status = ValPropIsNumber(attrKey,attrVal)
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]]; }
              }
              break

              case "isString":
              if(validationsProperties[i] == 'isString') {
                status = ValPropIsString(attrKey,attrVal)
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]]; }
              }
              break

              case "isURL":
              if(validationsProperties[i] == 'isURL') {
                status = ValPropIsURL(attrKey,attrVal)
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]]; }
              }
              break

              case "maxLength":
              if(validationsProperties[i] == 'maxLength') {
                status = ValPropMaxLength(attrKey,attrVal,attributeObj[validationsProperties[i]])
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]] + " " + attributeObj[validationsProperties[i]]; }
              }
              break

              case "minLength":
              if(validationsProperties[i] == 'minLength') {
                status = ValPropMinLength(attrKey,attrVal,attributeObj[validationsProperties[i]])
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]] + " " + attributeObj[validationsProperties[i]]; }
              }
              break

              case "isInteger":
              if(validationsProperties[i] == 'isInteger') {
                status = ValPropIsInteger(attrKey,attrVal)
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]]; }
              }
              break

              case "isIP":
              if(validationsProperties[i] == 'isIP') {
                status = ValPropIsIP(attrKey,attrVal)
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]]; }
              }
              break

              case "isHexColor":
              if(validationsProperties[i] == 'isHexColor') {
                status = ValPropIsHexColor(attrKey,attrVal)
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]]; }
              }
              break

              case "regex":
              if(validationsProperties[i] == 'regex') {
                status = ValPropRegex(attrKey,attrVal,attributeObj[validationsProperties[i]])
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]] + " " + attributeObj[validationsProperties[i]]; }
              }
              break

              case "isUUID":
              if(validationsProperties[i] == 'isUUID') {
                status = ValPropIsUUID(attrKey,attrVal)
                if(status == false) { errorCount++; total_errors["error-"+attrKey] = errorMessages[validationsProperties[i]] + " " + attributeObj[validationsProperties[i]]; }
              }
              break

            }

          }
        }
        }
      }
    }
  })

  for (var key in total_errors) {
    document.getElementById(key).innerHTML = "<strong>Error</strong>: "+ total_errors[key]
    document.getElementById(key).style.display = 'block';
  }
  if(errorCount == 0){
    return true;
  } else {
    return false;
  }

}

function validateEmail(email) {
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
}

/***********************************************/
function ValPropMin(attrKey,attrVal,expectedValue) {
  var node = document.getElementById('error-'+attrKey);
  if(attrVal < expectedValue) {
    return false;
  } else {
    return true;
  }
}

function ValPropMax(attrKey,attrVal,expectedValue) {
  var node = document.getElementById('error-'+attrKey);
  if(attrVal > expectedValue) {
    return false;
  } else {
    return true;
  }
}

function ValPropIsIn(attrKey,attrVal,expectedValue) {
  var status = false;
  for(var i=0; i < expectedValue.length; i++){
    var element = expectedValue[i];
    if(element == attrVal){
      status = true;
      break;
    }
  }
  if(status == false) {
    return false;
  } else {
    return true;
  }
}

function ValPropIsNotIn(attrKey,attrVal,expectedValue) {
  var status = false;
  for(var i=0; i < expectedValue.length; i++){
    var element = expectedValue[i];
    if(element == attrVal){
      status = true;
      break;
    }
  }
  if(status == true) {
    return false;
  } else {
    return true;
  }
}

function ValPropIsEmail(attrKey,attrVal) {
  var status = validateEmail(attrVal);
  if(status == false) {
    return false;
  } else {
    return true;
  }
}

function ValPropIsBoolean(attrKey,attrVal) {
  if(attrVal == "true" || attrVal == "false"){
    return true;
  } else {
    return false;
  }
}

function ValPropIsNotEmptyString(attrKey,attrVal) {
  if(attrVal == '' || attrVal == null) {
    return false;
  } else {
    return true;
  }
}

function ValPropIsTypeJson(attrKey,attrVal) {
  if(attrVal == '' || attrVal == null)  return true;

  try {
    JSON.parse(attrVal);
  } catch (e) {
    return false;
  }
  return true;
}

function ValPropIsNumber(attrKey,attrVal) {
  var isnum = /^[0-9.]*$/.test(attrVal);
  if(isnum) {
    return true;
  } else {
    return false;
  }
}

function ValPropIsInteger(attrKey,attrVal) {
  var isnum = /^[0-9]*$/.test(attrVal);
  if(isnum) {
    return true;
  } else {
    return false;
  }
}

function ValPropIsString(attrKey,attrVal) {
  if (!attrVal.match(/^[0-9a-z]+$/)) {
  return false;
  } else {
    return true;
  }
}

function ValPropIsURL(attrKey,attrVal) {
  var regex = /(http|https):\/\/(\w+:{0,1}\w*)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%!\-\/]))?/
  if(!regex .test(attrVal)) {
    return false;
  } else {
    return true;
  }
}

function ValPropMaxLength(attrKey,attrVal,expectedValue) {
  if(attrVal.length > expectedValue) {
    return false;
  } else {
    return true;
  }
}

function ValPropMinLength(attrKey,attrVal,expectedValue) {
  if(attrVal.length < expectedValue) {
    return false;
  } else {
    return true;
  }
}

function ValPropIsIP(attrKey,attrVal) {
  var regex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
  if(!regex .test(attrVal)) {
    return false;
  } else {
    return true;
  }
}

function ValPropIsHexColor(attrKey,attrVal) {
  var regex = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i
  if(!regex .test(attrVal)) {
    return false;
  } else {
    return true;
  }
}

function ValPropRegex(attrKey,attrVal,expectedValue) {
  var regex = new RegExp(expectedValue, "i");
  if(!regex.test(attrVal)) {
    return false;
  } else {
    return true;
  }
}

function ValPropIsUUID(attrKey,attrVal) {
  var regex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/
  if(!regex.test(attrVal)) {
    return false;
  } else {
    return true;
  }
}

</script>
